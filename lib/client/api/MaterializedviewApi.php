<?php
/**
 * MaterializedviewApi
 * PHP version 5
 *
 * @category Class
 * @package  Rakam
 * @author   http://github.com/swagger-api/swagger-codegen
 * @license  http://www.apache.org/licenses/LICENSE-2.0 Apache Licene v2
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Rakam API Documentation
 *
 * An analytics platform API that lets you create your own analytics services.
 *
 * OpenAPI spec version: 0.5
 * Contact: contact@rakam.io
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace client.api;

use \Rakam\Configuration;
use \Rakam\ApiClient;
use \Rakam\ApiException;
use \Rakam\ObjectSerializer;

/**
 * MaterializedviewApi Class Doc Comment
 *
 * @category Class
 * @package  Rakam
 * @author   http://github.com/swagger-api/swagger-codegen
 * @license  http://www.apache.org/licenses/LICENSE-2.0 Apache Licene v2
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class MaterializedviewApi
{

    /**
     * API Client
     *
     * @var \Rakam\ApiClient instance of the ApiClient
     */
    protected $apiClient;

    /**
     * Constructor
     *
     * @param \Rakam\ApiClient|null $apiClient The api client to use
     */
    public function __construct(\Rakam\ApiClient $apiClient = null)
    {
        if ($apiClient == null) {
            $apiClient = new ApiClient();
            $apiClient->getConfig()->setHost('https://app.rakam.io/');
        }

        $this->apiClient = $apiClient;
    }

    /**
     * Get API client
     *
     * @return \Rakam\ApiClient get the API client
     */
    public function getApiClient()
    {
        return $this->apiClient;
    }

    /**
     * Set the API client
     *
     * @param \Rakam\ApiClient $apiClient set the API client
     *
     * @return MaterializedviewApi
     */
    public function setApiClient(\Rakam\ApiClient $apiClient)
    {
        $this->apiClient = $apiClient;
        return $this;
    }

    /**
     * Operation createView
     *
     * Create view
     *
     * @param \client.model\MaterializedView $materialized_view  (required)
     * @return \client.model\SuccessMessage
     * @throws \Rakam\ApiException on non-2xx response
     */
    public function createView($materialized_view)
    {
        list($response) = $this->createViewWithHttpInfo($materialized_view);
        return $response;
    }

    /**
     * Operation createViewWithHttpInfo
     *
     * Create view
     *
     * @param \client.model\MaterializedView $materialized_view  (required)
     * @return Array of \client.model\SuccessMessage, HTTP status code, HTTP response headers (array of strings)
     * @throws \Rakam\ApiException on non-2xx response
     */
    public function createViewWithHttpInfo($materialized_view)
    {
        // verify the required parameter 'materialized_view' is set
        if ($materialized_view === null) {
            throw new \InvalidArgumentException('Missing the required parameter $materialized_view when calling createView');
        }
        // parse inputs
        $resourcePath = "/materialized-view/create";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/json'));

        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        // body params
        $_tempBody = null;
        if (isset($materialized_view)) {
            $_tempBody = $materialized_view;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('master_key');
        if (strlen($apiKey) !== 0) {
            $headerParams['master_key'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'POST',
                $queryParams,
                $httpBody,
                $headerParams,
                '\client.model\SuccessMessage',
                '/materialized-view/create'
            );

            return array($this->apiClient->getSerializer()->deserialize($response, '\client.model\SuccessMessage', $httpHeader), $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\client.model\SuccessMessage', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\client.model\ErrorMessage', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation deleteView
     *
     * Delete materialized view
     *
     * @param \client.model\MaterializedViewDeleteView $materialized_view_delete_view  (required)
     * @return \client.model\SuccessMessage
     * @throws \Rakam\ApiException on non-2xx response
     */
    public function deleteView($materialized_view_delete_view)
    {
        list($response) = $this->deleteViewWithHttpInfo($materialized_view_delete_view);
        return $response;
    }

    /**
     * Operation deleteViewWithHttpInfo
     *
     * Delete materialized view
     *
     * @param \client.model\MaterializedViewDeleteView $materialized_view_delete_view  (required)
     * @return Array of \client.model\SuccessMessage, HTTP status code, HTTP response headers (array of strings)
     * @throws \Rakam\ApiException on non-2xx response
     */
    public function deleteViewWithHttpInfo($materialized_view_delete_view)
    {
        // verify the required parameter 'materialized_view_delete_view' is set
        if ($materialized_view_delete_view === null) {
            throw new \InvalidArgumentException('Missing the required parameter $materialized_view_delete_view when calling deleteView');
        }
        // parse inputs
        $resourcePath = "/materialized-view/delete";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/json'));

        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        // body params
        $_tempBody = null;
        if (isset($materialized_view_delete_view)) {
            $_tempBody = $materialized_view_delete_view;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('master_key');
        if (strlen($apiKey) !== 0) {
            $headerParams['master_key'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'POST',
                $queryParams,
                $httpBody,
                $headerParams,
                '\client.model\SuccessMessage',
                '/materialized-view/delete'
            );

            return array($this->apiClient->getSerializer()->deserialize($response, '\client.model\SuccessMessage', $httpHeader), $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\client.model\SuccessMessage', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\client.model\ErrorMessage', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation getSchemaOfView
     *
     * Get schemas
     *
     * @param \client.model\MaterializedViewGetSchemaOfView $materialized_view_get_schema_of_view  (required)
     * @return \client.model\MaterializedViewSchema[]
     * @throws \Rakam\ApiException on non-2xx response
     */
    public function getSchemaOfView($materialized_view_get_schema_of_view)
    {
        list($response) = $this->getSchemaOfViewWithHttpInfo($materialized_view_get_schema_of_view);
        return $response;
    }

    /**
     * Operation getSchemaOfViewWithHttpInfo
     *
     * Get schemas
     *
     * @param \client.model\MaterializedViewGetSchemaOfView $materialized_view_get_schema_of_view  (required)
     * @return Array of \client.model\MaterializedViewSchema[], HTTP status code, HTTP response headers (array of strings)
     * @throws \Rakam\ApiException on non-2xx response
     */
    public function getSchemaOfViewWithHttpInfo($materialized_view_get_schema_of_view)
    {
        // verify the required parameter 'materialized_view_get_schema_of_view' is set
        if ($materialized_view_get_schema_of_view === null) {
            throw new \InvalidArgumentException('Missing the required parameter $materialized_view_get_schema_of_view when calling getSchemaOfView');
        }
        // parse inputs
        $resourcePath = "/materialized-view/schema";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/json'));

        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        // body params
        $_tempBody = null;
        if (isset($materialized_view_get_schema_of_view)) {
            $_tempBody = $materialized_view_get_schema_of_view;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('read_key');
        if (strlen($apiKey) !== 0) {
            $headerParams['read_key'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'POST',
                $queryParams,
                $httpBody,
                $headerParams,
                '\client.model\MaterializedViewSchema[]',
                '/materialized-view/schema'
            );

            return array($this->apiClient->getSerializer()->deserialize($response, '\client.model\MaterializedViewSchema[]', $httpHeader), $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\client.model\MaterializedViewSchema[]', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\client.model\ErrorMessage', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation getView
     *
     * Get view
     *
     * @param \client.model\MaterializedViewGetView $materialized_view_get_view  (required)
     * @return \client.model\MaterializedView
     * @throws \Rakam\ApiException on non-2xx response
     */
    public function getView($materialized_view_get_view)
    {
        list($response) = $this->getViewWithHttpInfo($materialized_view_get_view);
        return $response;
    }

    /**
     * Operation getViewWithHttpInfo
     *
     * Get view
     *
     * @param \client.model\MaterializedViewGetView $materialized_view_get_view  (required)
     * @return Array of \client.model\MaterializedView, HTTP status code, HTTP response headers (array of strings)
     * @throws \Rakam\ApiException on non-2xx response
     */
    public function getViewWithHttpInfo($materialized_view_get_view)
    {
        // verify the required parameter 'materialized_view_get_view' is set
        if ($materialized_view_get_view === null) {
            throw new \InvalidArgumentException('Missing the required parameter $materialized_view_get_view when calling getView');
        }
        // parse inputs
        $resourcePath = "/materialized-view/get";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/json'));

        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        // body params
        $_tempBody = null;
        if (isset($materialized_view_get_view)) {
            $_tempBody = $materialized_view_get_view;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('read_key');
        if (strlen($apiKey) !== 0) {
            $headerParams['read_key'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'POST',
                $queryParams,
                $httpBody,
                $headerParams,
                '\client.model\MaterializedView',
                '/materialized-view/get'
            );

            return array($this->apiClient->getSerializer()->deserialize($response, '\client.model\MaterializedView', $httpHeader), $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\client.model\MaterializedView', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\client.model\ErrorMessage', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation listViews
     *
     * List views
     *
     * @return \client.model\MaterializedView[]
     * @throws \Rakam\ApiException on non-2xx response
     */
    public function listViews()
    {
        list($response) = $this->listViewsWithHttpInfo();
        return $response;
    }

    /**
     * Operation listViewsWithHttpInfo
     *
     * List views
     *
     * @return Array of \client.model\MaterializedView[], HTTP status code, HTTP response headers (array of strings)
     * @throws \Rakam\ApiException on non-2xx response
     */
    public function listViewsWithHttpInfo()
    {
        // parse inputs
        $resourcePath = "/materialized-view/list";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/json'));

        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('read_key');
        if (strlen($apiKey) !== 0) {
            $headerParams['read_key'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'POST',
                $queryParams,
                $httpBody,
                $headerParams,
                '\client.model\MaterializedView[]',
                '/materialized-view/list'
            );

            return array($this->apiClient->getSerializer()->deserialize($response, '\client.model\MaterializedView[]', $httpHeader), $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\client.model\MaterializedView[]', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\client.model\ErrorMessage', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

}
