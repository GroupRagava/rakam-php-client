<?php
/**
 * AdminApi
 * PHP version 5
 *
 * @category Class
 * @package  Rakam
 * @author   http://github.com/swagger-api/swagger-codegen
 * @license  http://www.apache.org/licenses/LICENSE-2.0 Apache Licene v2
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Rakam API Documentation
 *
 * An analytics platform API that lets you create your own analytics services.
 *
 * OpenAPI spec version: 0.5
 * Contact: contact@rakam.io
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace client.api;

use \Rakam\Configuration;
use \Rakam\ApiClient;
use \Rakam\ApiException;
use \Rakam\ObjectSerializer;

/**
 * AdminApi Class Doc Comment
 *
 * @category Class
 * @package  Rakam
 * @author   http://github.com/swagger-api/swagger-codegen
 * @license  http://www.apache.org/licenses/LICENSE-2.0 Apache Licene v2
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class AdminApi
{

    /**
     * API Client
     *
     * @var \Rakam\ApiClient instance of the ApiClient
     */
    protected $apiClient;

    /**
     * Constructor
     *
     * @param \Rakam\ApiClient|null $apiClient The api client to use
     */
    public function __construct(\Rakam\ApiClient $apiClient = null)
    {
        if ($apiClient == null) {
            $apiClient = new ApiClient();
            $apiClient->getConfig()->setHost('https://app.rakam.io/');
        }

        $this->apiClient = $apiClient;
    }

    /**
     * Get API client
     *
     * @return \Rakam\ApiClient get the API client
     */
    public function getApiClient()
    {
        return $this->apiClient;
    }

    /**
     * Set the API client
     *
     * @param \Rakam\ApiClient $apiClient set the API client
     *
     * @return AdminApi
     */
    public function setApiClient(\Rakam\ApiClient $apiClient)
    {
        $this->apiClient = $apiClient;
        return $this;
    }

    /**
     * Operation addCustomFieldsToSchema
     *
     * Add fields to collections by transforming other schemas
     *
     * @param \client.model\ProjectAddCustomFieldsToSchema $project_add_custom_fields_to_schema  (required)
     * @return \client.model\SchemaField[]
     * @throws \Rakam\ApiException on non-2xx response
     */
    public function addCustomFieldsToSchema($project_add_custom_fields_to_schema)
    {
        list($response) = $this->addCustomFieldsToSchemaWithHttpInfo($project_add_custom_fields_to_schema);
        return $response;
    }

    /**
     * Operation addCustomFieldsToSchemaWithHttpInfo
     *
     * Add fields to collections by transforming other schemas
     *
     * @param \client.model\ProjectAddCustomFieldsToSchema $project_add_custom_fields_to_schema  (required)
     * @return Array of \client.model\SchemaField[], HTTP status code, HTTP response headers (array of strings)
     * @throws \Rakam\ApiException on non-2xx response
     */
    public function addCustomFieldsToSchemaWithHttpInfo($project_add_custom_fields_to_schema)
    {
        // verify the required parameter 'project_add_custom_fields_to_schema' is set
        if ($project_add_custom_fields_to_schema === null) {
            throw new \InvalidArgumentException('Missing the required parameter $project_add_custom_fields_to_schema when calling addCustomFieldsToSchema');
        }
        // parse inputs
        $resourcePath = "/project/schema/add/custom";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/json'));

        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        // body params
        $_tempBody = null;
        if (isset($project_add_custom_fields_to_schema)) {
            $_tempBody = $project_add_custom_fields_to_schema;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('master_key');
        if (strlen($apiKey) !== 0) {
            $headerParams['master_key'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'POST',
                $queryParams,
                $httpBody,
                $headerParams,
                '\client.model\SchemaField[]',
                '/project/schema/add/custom'
            );

            return array($this->apiClient->getSerializer()->deserialize($response, '\client.model\SchemaField[]', $httpHeader), $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\client.model\SchemaField[]', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\client.model\ErrorMessage', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation addFieldsToSchema
     *
     * Add fields to collections
     *
     * @param \client.model\ProjectAddFieldsToSchema $project_add_fields_to_schema  (required)
     * @return \client.model\SchemaField[]
     * @throws \Rakam\ApiException on non-2xx response
     */
    public function addFieldsToSchema($project_add_fields_to_schema)
    {
        list($response) = $this->addFieldsToSchemaWithHttpInfo($project_add_fields_to_schema);
        return $response;
    }

    /**
     * Operation addFieldsToSchemaWithHttpInfo
     *
     * Add fields to collections
     *
     * @param \client.model\ProjectAddFieldsToSchema $project_add_fields_to_schema  (required)
     * @return Array of \client.model\SchemaField[], HTTP status code, HTTP response headers (array of strings)
     * @throws \Rakam\ApiException on non-2xx response
     */
    public function addFieldsToSchemaWithHttpInfo($project_add_fields_to_schema)
    {
        // verify the required parameter 'project_add_fields_to_schema' is set
        if ($project_add_fields_to_schema === null) {
            throw new \InvalidArgumentException('Missing the required parameter $project_add_fields_to_schema when calling addFieldsToSchema');
        }
        // parse inputs
        $resourcePath = "/project/schema/add";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/json'));

        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        // body params
        $_tempBody = null;
        if (isset($project_add_fields_to_schema)) {
            $_tempBody = $project_add_fields_to_schema;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('master_key');
        if (strlen($apiKey) !== 0) {
            $headerParams['master_key'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'POST',
                $queryParams,
                $httpBody,
                $headerParams,
                '\client.model\SchemaField[]',
                '/project/schema/add'
            );

            return array($this->apiClient->getSerializer()->deserialize($response, '\client.model\SchemaField[]', $httpHeader), $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\client.model\SchemaField[]', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\client.model\ErrorMessage', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation checkApiKeys
     *
     * Create API Keys
     *
     * @param \client.model\ProjectCheckApiKeys $project_check_api_keys  (required)
     * @return bool[]
     * @throws \Rakam\ApiException on non-2xx response
     */
    public function checkApiKeys($project_check_api_keys)
    {
        list($response) = $this->checkApiKeysWithHttpInfo($project_check_api_keys);
        return $response;
    }

    /**
     * Operation checkApiKeysWithHttpInfo
     *
     * Create API Keys
     *
     * @param \client.model\ProjectCheckApiKeys $project_check_api_keys  (required)
     * @return Array of bool[], HTTP status code, HTTP response headers (array of strings)
     * @throws \Rakam\ApiException on non-2xx response
     */
    public function checkApiKeysWithHttpInfo($project_check_api_keys)
    {
        // verify the required parameter 'project_check_api_keys' is set
        if ($project_check_api_keys === null) {
            throw new \InvalidArgumentException('Missing the required parameter $project_check_api_keys when calling checkApiKeys');
        }
        // parse inputs
        $resourcePath = "/project/check-api-keys";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/json'));

        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        // body params
        $_tempBody = null;
        if (isset($project_check_api_keys)) {
            $_tempBody = $project_check_api_keys;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'POST',
                $queryParams,
                $httpBody,
                $headerParams,
                'bool[]',
                '/project/check-api-keys'
            );

            return array($this->apiClient->getSerializer()->deserialize($response, 'bool[]', $httpHeader), $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), 'bool[]', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation checkLockKey
     *
     * Check lock key
     *
     * @param \client.model\CheckLockKey $check_lock_key  (required)
     * @return bool
     * @throws \Rakam\ApiException on non-2xx response
     */
    public function checkLockKey($check_lock_key)
    {
        list($response) = $this->checkLockKeyWithHttpInfo($check_lock_key);
        return $response;
    }

    /**
     * Operation checkLockKeyWithHttpInfo
     *
     * Check lock key
     *
     * @param \client.model\CheckLockKey $check_lock_key  (required)
     * @return Array of bool, HTTP status code, HTTP response headers (array of strings)
     * @throws \Rakam\ApiException on non-2xx response
     */
    public function checkLockKeyWithHttpInfo($check_lock_key)
    {
        // verify the required parameter 'check_lock_key' is set
        if ($check_lock_key === null) {
            throw new \InvalidArgumentException('Missing the required parameter $check_lock_key when calling checkLockKey');
        }
        // parse inputs
        $resourcePath = "/admin/lock_key";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/json'));

        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        // body params
        $_tempBody = null;
        if (isset($check_lock_key)) {
            $_tempBody = $check_lock_key;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('master_key');
        if (strlen($apiKey) !== 0) {
            $headerParams['master_key'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'POST',
                $queryParams,
                $httpBody,
                $headerParams,
                'bool',
                '/admin/lock_key'
            );

            return array($this->apiClient->getSerializer()->deserialize($response, 'bool', $httpHeader), $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), 'bool', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\client.model\ErrorMessage', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation collections
     *
     * Get collection names
     *
     * @return string[]
     * @throws \Rakam\ApiException on non-2xx response
     */
    public function collections()
    {
        list($response) = $this->collectionsWithHttpInfo();
        return $response;
    }

    /**
     * Operation collectionsWithHttpInfo
     *
     * Get collection names
     *
     * @return Array of string[], HTTP status code, HTTP response headers (array of strings)
     * @throws \Rakam\ApiException on non-2xx response
     */
    public function collectionsWithHttpInfo()
    {
        // parse inputs
        $resourcePath = "/project/collection";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/json'));

        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('read_key');
        if (strlen($apiKey) !== 0) {
            $headerParams['read_key'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'POST',
                $queryParams,
                $httpBody,
                $headerParams,
                'string[]',
                '/project/collection'
            );

            return array($this->apiClient->getSerializer()->deserialize($response, 'string[]', $httpHeader), $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), 'string[]', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\client.model\ErrorMessage', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation createApiKeys
     *
     * Create API Keys
     *
     * @return \client.model\ProjectApiKeys
     * @throws \Rakam\ApiException on non-2xx response
     */
    public function createApiKeys()
    {
        list($response) = $this->createApiKeysWithHttpInfo();
        return $response;
    }

    /**
     * Operation createApiKeysWithHttpInfo
     *
     * Create API Keys
     *
     * @return Array of \client.model\ProjectApiKeys, HTTP status code, HTTP response headers (array of strings)
     * @throws \Rakam\ApiException on non-2xx response
     */
    public function createApiKeysWithHttpInfo()
    {
        // parse inputs
        $resourcePath = "/project/create-api-keys";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/json'));

        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('master_key');
        if (strlen($apiKey) !== 0) {
            $headerParams['master_key'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'POST',
                $queryParams,
                $httpBody,
                $headerParams,
                '\client.model\ProjectApiKeys',
                '/project/create-api-keys'
            );

            return array($this->apiClient->getSerializer()->deserialize($response, '\client.model\ProjectApiKeys', $httpHeader), $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\client.model\ProjectApiKeys', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\client.model\ErrorMessage', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation createProject
     *
     * Create project
     *
     * @param \client.model\CreateProject $create_project  (required)
     * @return \client.model\ProjectApiKeys
     * @throws \Rakam\ApiException on non-2xx response
     */
    public function createProject($create_project)
    {
        list($response) = $this->createProjectWithHttpInfo($create_project);
        return $response;
    }

    /**
     * Operation createProjectWithHttpInfo
     *
     * Create project
     *
     * @param \client.model\CreateProject $create_project  (required)
     * @return Array of \client.model\ProjectApiKeys, HTTP status code, HTTP response headers (array of strings)
     * @throws \Rakam\ApiException on non-2xx response
     */
    public function createProjectWithHttpInfo($create_project)
    {
        // verify the required parameter 'create_project' is set
        if ($create_project === null) {
            throw new \InvalidArgumentException('Missing the required parameter $create_project when calling createProject');
        }
        // parse inputs
        $resourcePath = "/project/create";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/json'));

        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        // body params
        $_tempBody = null;
        if (isset($create_project)) {
            $_tempBody = $create_project;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'POST',
                $queryParams,
                $httpBody,
                $headerParams,
                '\client.model\ProjectApiKeys',
                '/project/create'
            );

            return array($this->apiClient->getSerializer()->deserialize($response, '\client.model\ProjectApiKeys', $httpHeader), $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\client.model\ProjectApiKeys', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation deleteProject
     *
     * Delete project
     *
     * @return \client.model\SuccessMessage
     * @throws \Rakam\ApiException on non-2xx response
     */
    public function deleteProject()
    {
        list($response) = $this->deleteProjectWithHttpInfo();
        return $response;
    }

    /**
     * Operation deleteProjectWithHttpInfo
     *
     * Delete project
     *
     * @return Array of \client.model\SuccessMessage, HTTP status code, HTTP response headers (array of strings)
     * @throws \Rakam\ApiException on non-2xx response
     */
    public function deleteProjectWithHttpInfo()
    {
        // parse inputs
        $resourcePath = "/project/delete";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/json'));

        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('master_key');
        if (strlen($apiKey) !== 0) {
            $headerParams['master_key'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'DELETE',
                $queryParams,
                $httpBody,
                $headerParams,
                '\client.model\SuccessMessage',
                '/project/delete'
            );

            return array($this->apiClient->getSerializer()->deserialize($response, '\client.model\SuccessMessage', $httpHeader), $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\client.model\SuccessMessage', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\client.model\ErrorMessage', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation getConfigurations
     *
     * List installed modules
     *
     * @return \client.model\ModuleDescriptor[]
     * @throws \Rakam\ApiException on non-2xx response
     */
    public function getConfigurations()
    {
        list($response) = $this->getConfigurationsWithHttpInfo();
        return $response;
    }

    /**
     * Operation getConfigurationsWithHttpInfo
     *
     * List installed modules
     *
     * @return Array of \client.model\ModuleDescriptor[], HTTP status code, HTTP response headers (array of strings)
     * @throws \Rakam\ApiException on non-2xx response
     */
    public function getConfigurationsWithHttpInfo()
    {
        // parse inputs
        $resourcePath = "/admin/configurations";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/json'));

        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('master_key');
        if (strlen($apiKey) !== 0) {
            $headerParams['master_key'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\client.model\ModuleDescriptor[]',
                '/admin/configurations'
            );

            return array($this->apiClient->getSerializer()->deserialize($response, '\client.model\ModuleDescriptor[]', $httpHeader), $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\client.model\ModuleDescriptor[]', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\client.model\ErrorMessage', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation getProjects
     *
     * List created projects
     *
     * @return string[]
     * @throws \Rakam\ApiException on non-2xx response
     */
    public function getProjects()
    {
        list($response) = $this->getProjectsWithHttpInfo();
        return $response;
    }

    /**
     * Operation getProjectsWithHttpInfo
     *
     * List created projects
     *
     * @return Array of string[], HTTP status code, HTTP response headers (array of strings)
     * @throws \Rakam\ApiException on non-2xx response
     */
    public function getProjectsWithHttpInfo()
    {
        // parse inputs
        $resourcePath = "/project/list";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/json'));

        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('read_key');
        if (strlen($apiKey) !== 0) {
            $headerParams['read_key'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                'string[]',
                '/project/list'
            );

            return array($this->apiClient->getSerializer()->deserialize($response, 'string[]', $httpHeader), $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), 'string[]', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\client.model\ErrorMessage', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation getStats
     *
     * Get project stats
     *
     * @param \client.model\ProjectGetStats $project_get_stats  (required)
     * @return map[string,\client.model\Stats]
     * @throws \Rakam\ApiException on non-2xx response
     */
    public function getStats($project_get_stats)
    {
        list($response) = $this->getStatsWithHttpInfo($project_get_stats);
        return $response;
    }

    /**
     * Operation getStatsWithHttpInfo
     *
     * Get project stats
     *
     * @param \client.model\ProjectGetStats $project_get_stats  (required)
     * @return Array of map[string,\client.model\Stats], HTTP status code, HTTP response headers (array of strings)
     * @throws \Rakam\ApiException on non-2xx response
     */
    public function getStatsWithHttpInfo($project_get_stats)
    {
        // verify the required parameter 'project_get_stats' is set
        if ($project_get_stats === null) {
            throw new \InvalidArgumentException('Missing the required parameter $project_get_stats when calling getStats');
        }
        // parse inputs
        $resourcePath = "/project/stats";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/json'));

        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        // body params
        $_tempBody = null;
        if (isset($project_get_stats)) {
            $_tempBody = $project_get_stats;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'POST',
                $queryParams,
                $httpBody,
                $headerParams,
                'map[string,\client.model\Stats]',
                '/project/stats'
            );

            return array($this->apiClient->getSerializer()->deserialize($response, 'map[string,\client.model\Stats]', $httpHeader), $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), 'map[string,\client.model\Stats]', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation getTypes
     *
     * Get types
     *
     * @return map[string,string]
     * @throws \Rakam\ApiException on non-2xx response
     */
    public function getTypes()
    {
        list($response) = $this->getTypesWithHttpInfo();
        return $response;
    }

    /**
     * Operation getTypesWithHttpInfo
     *
     * Get types
     *
     * @return Array of map[string,string], HTTP status code, HTTP response headers (array of strings)
     * @throws \Rakam\ApiException on non-2xx response
     */
    public function getTypesWithHttpInfo()
    {
        // parse inputs
        $resourcePath = "/admin/types";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/json'));

        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('master_key');
        if (strlen($apiKey) !== 0) {
            $headerParams['master_key'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                'map[string,string]',
                '/admin/types'
            );

            return array($this->apiClient->getSerializer()->deserialize($response, 'map[string,string]', $httpHeader), $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), 'map[string,string]', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\client.model\ErrorMessage', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation revokeApiKeys
     *
     * Revoke API Keys
     *
     * @param string $master_key  (required)
     * @return \client.model\SuccessMessage
     * @throws \Rakam\ApiException on non-2xx response
     */
    public function revokeApiKeys($master_key)
    {
        list($response) = $this->revokeApiKeysWithHttpInfo($master_key);
        return $response;
    }

    /**
     * Operation revokeApiKeysWithHttpInfo
     *
     * Revoke API Keys
     *
     * @param string $master_key  (required)
     * @return Array of \client.model\SuccessMessage, HTTP status code, HTTP response headers (array of strings)
     * @throws \Rakam\ApiException on non-2xx response
     */
    public function revokeApiKeysWithHttpInfo($master_key)
    {
        // verify the required parameter 'master_key' is set
        if ($master_key === null) {
            throw new \InvalidArgumentException('Missing the required parameter $master_key when calling revokeApiKeys');
        }
        // parse inputs
        $resourcePath = "/project/revoke-api-keys";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/json'));

        // header params
        if ($master_key !== null) {
            $headerParams['master_key'] = $this->apiClient->getSerializer()->toHeaderValue($master_key);
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('master_key');
        if (strlen($apiKey) !== 0) {
            $headerParams['master_key'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'DELETE',
                $queryParams,
                $httpBody,
                $headerParams,
                '\client.model\SuccessMessage',
                '/project/revoke-api-keys'
            );

            return array($this->apiClient->getSerializer()->deserialize($response, '\client.model\SuccessMessage', $httpHeader), $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\client.model\SuccessMessage', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\client.model\ErrorMessage', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation schema
     *
     * Get collection schema
     *
     * @param \client.model\ProjectSchema $project_schema  (required)
     * @return \client.model\Collection[]
     * @throws \Rakam\ApiException on non-2xx response
     */
    public function schema($project_schema)
    {
        list($response) = $this->schemaWithHttpInfo($project_schema);
        return $response;
    }

    /**
     * Operation schemaWithHttpInfo
     *
     * Get collection schema
     *
     * @param \client.model\ProjectSchema $project_schema  (required)
     * @return Array of \client.model\Collection[], HTTP status code, HTTP response headers (array of strings)
     * @throws \Rakam\ApiException on non-2xx response
     */
    public function schemaWithHttpInfo($project_schema)
    {
        // verify the required parameter 'project_schema' is set
        if ($project_schema === null) {
            throw new \InvalidArgumentException('Missing the required parameter $project_schema when calling schema');
        }
        // parse inputs
        $resourcePath = "/project/schema";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/json'));

        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        // body params
        $_tempBody = null;
        if (isset($project_schema)) {
            $_tempBody = $project_schema;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('read_key');
        if (strlen($apiKey) !== 0) {
            $headerParams['read_key'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'POST',
                $queryParams,
                $httpBody,
                $headerParams,
                '\client.model\Collection[]',
                '/project/schema'
            );

            return array($this->apiClient->getSerializer()->deserialize($response, '\client.model\Collection[]', $httpHeader), $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\client.model\Collection[]', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\client.model\ErrorMessage', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

}
