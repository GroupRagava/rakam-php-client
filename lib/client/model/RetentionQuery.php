<?php
/**
 * RetentionQuery
 *
 * PHP version 5
 *
 * @category Class
 * @package  Rakam
 * @author   http://github.com/swagger-api/swagger-codegen
 * @license  http://www.apache.org/licenses/LICENSE-2.0 Apache Licene v2
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Rakam API Documentation
 *
 * An analytics platform API that lets you create your own analytics services.
 *
 * OpenAPI spec version: 0.5
 * Contact: contact@rakam.io
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace client.model;

use \ArrayAccess;

/**
 * RetentionQuery Class Doc Comment
 *
 * @category    Class */
/** 
 * @package     Rakam
 * @author      http://github.com/swagger-api/swagger-codegen
 * @license     http://www.apache.org/licenses/LICENSE-2.0 Apache Licene v2
 * @link        https://github.com/swagger-api/swagger-codegen
 */
class RetentionQuery implements ArrayAccess
{
    /**
      * The original name of the model.
      * @var string
      */
    protected static $swaggerModelName = 'RetentionQuery';

    /**
      * Array of property to type mappings. Used for (de)serialization
      * @var string[]
      */
    protected static $swaggerTypes = array(
        'first_action' => '\client.model\RetentionAction',
        'returning_action' => '\client.model\RetentionAction',
        'dimension' => 'string',
        'date_unit' => 'string',
        'period' => 'int',
        'start_date' => '\DateTime',
        'end_date' => '\DateTime'
    );

    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of attributes where the key is the local name, and the value is the original name
     * @var string[]
     */
    protected static $attributeMap = array(
        'first_action' => 'first_action',
        'returning_action' => 'returning_action',
        'dimension' => 'dimension',
        'date_unit' => 'date_unit',
        'period' => 'period',
        'start_date' => 'startDate',
        'end_date' => 'endDate'
    );

    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     * @var string[]
     */
    protected static $setters = array(
        'first_action' => 'setFirstAction',
        'returning_action' => 'setReturningAction',
        'dimension' => 'setDimension',
        'date_unit' => 'setDateUnit',
        'period' => 'setPeriod',
        'start_date' => 'setStartDate',
        'end_date' => 'setEndDate'
    );

    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     * @var string[]
     */
    protected static $getters = array(
        'first_action' => 'getFirstAction',
        'returning_action' => 'getReturningAction',
        'dimension' => 'getDimension',
        'date_unit' => 'getDateUnit',
        'period' => 'getPeriod',
        'start_date' => 'getStartDate',
        'end_date' => 'getEndDate'
    );

    public static function getters()
    {
        return self::$getters;
    }

    const DATE_UNIT_DAY = 'DAY';
    const DATE_UNIT_WEEK = 'WEEK';
    const DATE_UNIT_MONTH = 'MONTH';
    

    
    /**
     * Gets allowable values of the enum
     * @return string[]
     */
    public function getDateUnitAllowableValues()
    {
        return [
            self::DATE_UNIT_DAY,
            self::DATE_UNIT_WEEK,
            self::DATE_UNIT_MONTH,
        ];
    }
    

    /**
     * Associative array for storing property values
     * @var mixed[]
     */
    protected $container = array();

    /**
     * Constructor
     * @param mixed[] $data Associated array of property value initalizing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['first_action'] = isset($data['first_action']) ? $data['first_action'] : null;
        $this->container['returning_action'] = isset($data['returning_action']) ? $data['returning_action'] : null;
        $this->container['dimension'] = isset($data['dimension']) ? $data['dimension'] : null;
        $this->container['date_unit'] = isset($data['date_unit']) ? $data['date_unit'] : null;
        $this->container['period'] = isset($data['period']) ? $data['period'] : null;
        $this->container['start_date'] = isset($data['start_date']) ? $data['start_date'] : null;
        $this->container['end_date'] = isset($data['end_date']) ? $data['end_date'] : null;
    }

    /**
     * show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalid_properties = array();
        $allowed_values = array("DAY", "WEEK", "MONTH");
        if (!in_array($this->container['date_unit'], $allowed_values)) {
            $invalid_properties[] = "invalid value for 'date_unit', must be one of #{allowed_values}.";
        }
        return $invalid_properties;
    }

    /**
     * validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properteis are valid
     */
    public function valid()
    {
        $allowed_values = array("DAY", "WEEK", "MONTH");
        if (!in_array($this->container['date_unit'], $allowed_values)) {
            return false;
        }
        return true;
    }


    /**
     * Gets first_action
     * @return \client.model\RetentionAction
     */
    public function getFirstAction()
    {
        return $this->container['first_action'];
    }

    /**
     * Sets first_action
     * @param \client.model\RetentionAction $first_action
     * @return $this
     */
    public function setFirstAction($first_action)
    {
        $this->container['first_action'] = $first_action;

        return $this;
    }

    /**
     * Gets returning_action
     * @return \client.model\RetentionAction
     */
    public function getReturningAction()
    {
        return $this->container['returning_action'];
    }

    /**
     * Sets returning_action
     * @param \client.model\RetentionAction $returning_action
     * @return $this
     */
    public function setReturningAction($returning_action)
    {
        $this->container['returning_action'] = $returning_action;

        return $this;
    }

    /**
     * Gets dimension
     * @return string
     */
    public function getDimension()
    {
        return $this->container['dimension'];
    }

    /**
     * Sets dimension
     * @param string $dimension
     * @return $this
     */
    public function setDimension($dimension)
    {
        $this->container['dimension'] = $dimension;

        return $this;
    }

    /**
     * Gets date_unit
     * @return string
     */
    public function getDateUnit()
    {
        return $this->container['date_unit'];
    }

    /**
     * Sets date_unit
     * @param string $date_unit
     * @return $this
     */
    public function setDateUnit($date_unit)
    {
        $allowed_values = array('DAY', 'WEEK', 'MONTH');
        if (!in_array($date_unit, $allowed_values)) {
            throw new \InvalidArgumentException("Invalid value for 'date_unit', must be one of 'DAY', 'WEEK', 'MONTH'");
        }
        $this->container['date_unit'] = $date_unit;

        return $this;
    }

    /**
     * Gets period
     * @return int
     */
    public function getPeriod()
    {
        return $this->container['period'];
    }

    /**
     * Sets period
     * @param int $period
     * @return $this
     */
    public function setPeriod($period)
    {
        $this->container['period'] = $period;

        return $this;
    }

    /**
     * Gets start_date
     * @return \DateTime
     */
    public function getStartDate()
    {
        return $this->container['start_date'];
    }

    /**
     * Sets start_date
     * @param \DateTime $start_date
     * @return $this
     */
    public function setStartDate($start_date)
    {
        $this->container['start_date'] = $start_date;

        return $this;
    }

    /**
     * Gets end_date
     * @return \DateTime
     */
    public function getEndDate()
    {
        return $this->container['end_date'];
    }

    /**
     * Sets end_date
     * @param \DateTime $end_date
     * @return $this
     */
    public function setEndDate($end_date)
    {
        $this->container['end_date'] = $end_date;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     * @param  integer $offset Offset
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     * @param  integer $offset Offset
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     * @param  integer $offset Offset
     * @param  mixed   $value  Value to be set
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     * @param  integer $offset Offset
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(\Rakam\ObjectSerializer::sanitizeForSerialization($this), JSON_PRETTY_PRINT);
        }

        return json_encode(\Rakam\ObjectSerializer::sanitizeForSerialization($this));
    }
}


