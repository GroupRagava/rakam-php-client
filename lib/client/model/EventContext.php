<?php
/**
 * EventContext
 *
 * PHP version 5
 *
 * @category Class
 * @package  Rakam
 * @author   http://github.com/swagger-api/swagger-codegen
 * @license  http://www.apache.org/licenses/LICENSE-2.0 Apache Licene v2
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Rakam API Documentation
 *
 * An analytics platform API that lets you create your own analytics services.
 *
 * OpenAPI spec version: 0.5
 * Contact: contact@rakam.io
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace client.model;

use \ArrayAccess;

/**
 * EventContext Class Doc Comment
 *
 * @category    Class */
/** 
 * @package     Rakam
 * @author      http://github.com/swagger-api/swagger-codegen
 * @license     http://www.apache.org/licenses/LICENSE-2.0 Apache Licene v2
 * @link        https://github.com/swagger-api/swagger-codegen
 */
class EventContext implements ArrayAccess
{
    /**
      * The original name of the model.
      * @var string
      */
    protected static $swaggerModelName = 'EventContext';

    /**
      * Array of property to type mappings. Used for (de)serialization
      * @var string[]
      */
    protected static $swaggerTypes = array(
        'api_key' => 'string',
        'library' => '\client.model\Library',
        'api_version' => 'string',
        'upload_time' => 'int',
        'checksum' => 'string',
        'plugins' => '\client.model\MappingPlugin[]'
    );

    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of attributes where the key is the local name, and the value is the original name
     * @var string[]
     */
    protected static $attributeMap = array(
        'api_key' => 'api_key',
        'library' => 'library',
        'api_version' => 'api_version',
        'upload_time' => 'upload_time',
        'checksum' => 'checksum',
        'plugins' => 'plugins'
    );

    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     * @var string[]
     */
    protected static $setters = array(
        'api_key' => 'setApiKey',
        'library' => 'setLibrary',
        'api_version' => 'setApiVersion',
        'upload_time' => 'setUploadTime',
        'checksum' => 'setChecksum',
        'plugins' => 'setPlugins'
    );

    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     * @var string[]
     */
    protected static $getters = array(
        'api_key' => 'getApiKey',
        'library' => 'getLibrary',
        'api_version' => 'getApiVersion',
        'upload_time' => 'getUploadTime',
        'checksum' => 'getChecksum',
        'plugins' => 'getPlugins'
    );

    public static function getters()
    {
        return self::$getters;
    }

    

    

    /**
     * Associative array for storing property values
     * @var mixed[]
     */
    protected $container = array();

    /**
     * Constructor
     * @param mixed[] $data Associated array of property value initalizing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['api_key'] = isset($data['api_key']) ? $data['api_key'] : null;
        $this->container['library'] = isset($data['library']) ? $data['library'] : null;
        $this->container['api_version'] = isset($data['api_version']) ? $data['api_version'] : null;
        $this->container['upload_time'] = isset($data['upload_time']) ? $data['upload_time'] : null;
        $this->container['checksum'] = isset($data['checksum']) ? $data['checksum'] : null;
        $this->container['plugins'] = isset($data['plugins']) ? $data['plugins'] : null;
    }

    /**
     * show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalid_properties = array();
        if ($this->container['api_key'] === null) {
            $invalid_properties[] = "'api_key' can't be null";
        }
        if ($this->container['library'] === null) {
            $invalid_properties[] = "'library' can't be null";
        }
        if ($this->container['api_version'] === null) {
            $invalid_properties[] = "'api_version' can't be null";
        }
        if ($this->container['upload_time'] === null) {
            $invalid_properties[] = "'upload_time' can't be null";
        }
        if ($this->container['checksum'] === null) {
            $invalid_properties[] = "'checksum' can't be null";
        }
        if ($this->container['plugins'] === null) {
            $invalid_properties[] = "'plugins' can't be null";
        }
        return $invalid_properties;
    }

    /**
     * validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properteis are valid
     */
    public function valid()
    {
        if ($this->container['api_key'] === null) {
            return false;
        }
        if ($this->container['library'] === null) {
            return false;
        }
        if ($this->container['api_version'] === null) {
            return false;
        }
        if ($this->container['upload_time'] === null) {
            return false;
        }
        if ($this->container['checksum'] === null) {
            return false;
        }
        if ($this->container['plugins'] === null) {
            return false;
        }
        return true;
    }


    /**
     * Gets api_key
     * @return string
     */
    public function getApiKey()
    {
        return $this->container['api_key'];
    }

    /**
     * Sets api_key
     * @param string $api_key
     * @return $this
     */
    public function setApiKey($api_key)
    {
        $this->container['api_key'] = $api_key;

        return $this;
    }

    /**
     * Gets library
     * @return \client.model\Library
     */
    public function getLibrary()
    {
        return $this->container['library'];
    }

    /**
     * Sets library
     * @param \client.model\Library $library
     * @return $this
     */
    public function setLibrary($library)
    {
        $this->container['library'] = $library;

        return $this;
    }

    /**
     * Gets api_version
     * @return string
     */
    public function getApiVersion()
    {
        return $this->container['api_version'];
    }

    /**
     * Sets api_version
     * @param string $api_version
     * @return $this
     */
    public function setApiVersion($api_version)
    {
        $this->container['api_version'] = $api_version;

        return $this;
    }

    /**
     * Gets upload_time
     * @return int
     */
    public function getUploadTime()
    {
        return $this->container['upload_time'];
    }

    /**
     * Sets upload_time
     * @param int $upload_time
     * @return $this
     */
    public function setUploadTime($upload_time)
    {
        $this->container['upload_time'] = $upload_time;

        return $this;
    }

    /**
     * Gets checksum
     * @return string
     */
    public function getChecksum()
    {
        return $this->container['checksum'];
    }

    /**
     * Sets checksum
     * @param string $checksum
     * @return $this
     */
    public function setChecksum($checksum)
    {
        $this->container['checksum'] = $checksum;

        return $this;
    }

    /**
     * Gets plugins
     * @return \client.model\MappingPlugin[]
     */
    public function getPlugins()
    {
        return $this->container['plugins'];
    }

    /**
     * Sets plugins
     * @param \client.model\MappingPlugin[] $plugins
     * @return $this
     */
    public function setPlugins($plugins)
    {
        $this->container['plugins'] = $plugins;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     * @param  integer $offset Offset
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     * @param  integer $offset Offset
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     * @param  integer $offset Offset
     * @param  mixed   $value  Value to be set
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     * @param  integer $offset Offset
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(\Rakam\ObjectSerializer::sanitizeForSerialization($this), JSON_PRETTY_PRINT);
        }

        return json_encode(\Rakam\ObjectSerializer::sanitizeForSerialization($this));
    }
}


